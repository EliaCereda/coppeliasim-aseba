import sys
import os
import argparse

parser = argparse.ArgumentParser(description='Generate simplier Thymio2 interface')
parser.add_argument('directory', type=str, default=".",
                    help='the directory witht the autogenerated files')
args = parser.parse_args()

sys.path.append(os.path.join(os.environ['COPPELIASIM_ROOT_DIR'],
                             "programming/libPlugin/simStubsGen"))

from parse import parse, escape
from model import ParamTable

plugin = parse(os.path.join(args.directory, 'reference.xml'))

out_file = 'simThymio-typecheck.lua'
name = 'Thymio'
lua_file = "simThymio"
prefix = '_thymio2_'


with open(os.path.join(args.directory, out_file), 'wt') as f:
    f.write(f"""-- sim{name} lua type-checking wrapper
-- (this file is automatically generated: do not edit)
require 'checkargs'
local sim{name}=require('{lua_file}')
local function wrapFunc(funcName, wrapperGenerator)
    sim{name}[funcName]=wrapperGenerator()
end
""")
    for cmd in plugin.commands:
        if '_thymio2_' not in cmd.name:
            continue
        cmd_name = cmd.name.split(prefix)[-1]
        paramList = ','.join(p.name for p in cmd.all_params)
        f.write(f"""
wrapFunc('{cmd_name}',function()
    return function(...)
        {paramList}{paramList and '=' or ''}checkargsEx(
            {{level=1}},
            {{
""")
        for p in cmd.all_params:
            f.write(f"""                    {{type='{p.dtype}'""")
            if isinstance(p, ParamTable):
                if p.itype:
                    f.write(f""",item_type='{p.itype}'""")
                if p.size:
                    f.write(f""",size='{p.size}'""")
            if p.nullable:
                f.write(f""",nullable=true""")
            if p.default:
                f.write(f""",default={p.default}""")
            f.write(f"""}},
""")
        f.write(f"""                }},
                ...
            )
            return _G['sim{plugin.name}']['{cmd.name}']({paramList})
        end
    end)
sim.registerScriptFunction("sim{name}.{cmd_name}@{plugin.name}", "{escape(cmd.calltip)}{escape(cmd.documentation)}")
""")

    f.write(f"""

return sim{name}
""")
