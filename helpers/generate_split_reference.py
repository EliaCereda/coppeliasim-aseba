# import sys
import os
import argparse
import xml.etree.ElementTree as ET


def generate_split_reference(directory, source_file):
    xml_file = os.path.join(directory, source_file)
    tree = ET.parse(xml_file)
    root = tree.getroot()
    aseba_root = ET.Element("plugin")
    aseba_tree = ET.ElementTree(aseba_root)
    aseba_root.attrib['name'] = "Aseba"
    aseba_root.attrib['author'] = "jerome@idsia.ch"
    thymio_root = ET.Element("plugin")
    thymio_tree = ET.ElementTree(thymio_root)
    thymio_root.attrib['name'] = "Thymio"
    thymio_root.attrib['author'] = "jerome@idsia.ch"

    prefix = '_thymio2_'
    category = 'thymio2'

    for cmd in root.iter('command'):
        if '_thymio2_' not in cmd.attrib['name']:
            aseba_root.append(cmd)
        else:
            cmd.attrib['name'] = cmd.attrib['name'].split(prefix)[-1]
            thymio_root.append(cmd)

    for s in root.iter('struct'):
        for_thymio = False
        for c in s.iter('category'):
            if c.attrib['name'] == category:
                for_thymio = True
                break
        if not for_thymio:
            aseba_root.append(s)
        else:
            thymio_root.append(s)
    for s in root.iter('enum'):
        for_thymio = False
        for c in s.iter('category'):
            if c.attrib['name'] == category:
                for_thymio = True
                break
        if not for_thymio:
            aseba_root.append(s)
        else:
            s.attrib['name'] = s.attrib['name'].split(prefix)[-1]
            thymio_root.append(s)
    aseba_file = "reference_Aseba.xml"
    thymio_file = "reference_Thymio.xml"
    aseba_tree.write(os.path.join(directory, aseba_file))
    thymio_tree.write(os.path.join(directory, thymio_file))
    return aseba_file, thymio_file


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate API docs in markdown')
    parser.add_argument('--directory', type=str, default=".",
                        help='the directory with the autogenerated files')
    parser.add_argument('--file', type=str, default="reference.xml",
                        help='the reference xml file')
    args = parser.parse_args()
    generate_split_reference(args.directory, args.file)
